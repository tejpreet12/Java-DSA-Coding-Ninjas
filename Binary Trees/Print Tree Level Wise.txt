/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/
import java.util.*;	
public class Solution {

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		//Your code goes here
        
        Queue<BinaryTreeNode<Integer>> pendingNodes = new LinkedList<>();
		pendingNodes.add(root);
		
		while(!pendingNodes.isEmpty()) {
			
			BinaryTreeNode<Integer> front;

			front = pendingNodes.poll();

			String s = front.data + ":";
			
			if(front.left != null ) {
				s += "L:" + front.left.data +",";
				pendingNodes.add(front.left);	
			}else{
                s += "L:" + "-1" +",";
            }
			
			if(front.right != null) {
				s += "R:" + front.right.data;
				pendingNodes.add(front.right);	
			}else{
                s += "R:" + "-1";
            }
				System.out.println(s);
		}
        
        
        
        
        
	}
	
}