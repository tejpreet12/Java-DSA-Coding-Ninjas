//METHOD - 1

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	static TreeNode<Integer> node1 = null;
    static TreeNode<Integer> node2 = new TreeNode<Integer>(Integer.MIN_VALUE);
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
        // Write your code here
        if(root == null){
            return null;
        }
        else{
            node1 = null;
            //node2 = ;
            fun(root);
            return node2;
        }

	}
    public static void fun(TreeNode<Integer> root){
        if(node1 == null){
            node1 = root;
           // node2 = root;
        }
        
        else if(root.data > node1.data){
            node2 = node1;
            node1 = root;
        }
        else if(root.data < node1.data  && root.data > node2.data){ //
            node2 = root;
        }
         
        for(int i = 0 ; i < root.children.size(); i++){
            fun(root.children.get(i));
        }
        return;
    }
}

//METHOD - 2

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
    
    static class Pair<T>{
        T first;
        T second;
        Pair(T first, T second){
            this.first = first;
            this.second = second;
        }
    }
    public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
        return findSecondLargestHelper(root).second;
    }
    public static Pair<TreeNode<Integer>> findSecondLargestHelper(TreeNode<Integer>root){
        Pair<TreeNode<Integer>> output;
        if(root == null){
            output = new Pair<TreeNode<Integer>>(null,null);
            return output;
        }
        output = new Pair<TreeNode<Integer>>(root, null);
        for(TreeNode<Integer> child : root.children){
            Pair<TreeNode<Integer>> childPair =
                findSecondLargestHelper(child);
            if(childPair.first.data > output.first.data){
                if(childPair.second == null || childPair.second.data <
                   output.first.data){
                    output.second = output.first;
                    output.first = childPair.first;
                }
                else{
                    output.first = childPair.first;
                    output.second = childPair.second;
                }
            } else if(childPair.first.data.equals(output.first.data) &&
                      childPair.second != null) {
                output.second = childPair.second;
            } else if(output.first.data != childPair.first.data &&
                      (output.second == null ||childPair.first.data > output.second.data)) {
                output.second = childPair.first;
            }
        }
        return output;
    }
}